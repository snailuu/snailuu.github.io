[{"id":"60a84708f3c49aa5488e16601f40a652","title":"算法选择","content":"朴素版Dijkstra算法(适用于稠密图)思路\n初始化距离数组和邻接矩阵（无穷大）\n\n处理重边问题在输入取最小值\n\n每次找到一个最小的未更新的答案点\n\n将其连边答案全部更新\n\n\n代码实现如下：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N=520,INF=0x3f3f3f3f;\nint n,m;\nint g[N][N],dis[N];\nbool st[N];\n\nint dijkstra()\n{\n    dis[1]=0;//每个点到一号点的最短距离\n    //如需求到s点的一开始将dis[s]定义为0即可\n    for(int i=0;i&lt;n-1;i++)\n    {\n        int t=-1;\n        for(int j=1;j&lt;=n;j++)\n        {\n            if(!st[j]&amp;&amp;(t==-1||dis[t]&gt;dis[j])) t=j;//找到当前未更新的最小点\n        }\n        for(int j=1;j&lt;=n;j++)\n            dis[j]=min(dis[j],dis[t]+g[t][j]);//将t连接的点都更新最短距离\n        st[t]=true;\n    }\n    if(dis[n]==0x3f3f3f3f)return -1;//1~n之间不连通，无法构成路径，也就没有最短距离\n    return dis[n];\n}\nint main()\n{\n    cin&gt;&gt;n&gt;&gt;m;\n    fill(g[0],g[0]+N*N,INF);\n    fill(dis,dis+N,INF);\n    while(m--)\n    {\n        int x,y,c;\n        cin&gt;&gt;x&gt;&gt;y&gt;&gt;c;\n        g[x][y]=min(g[x][y],c);//处理重边\n    }\n    cout&lt;&lt;dijkstra()&lt;&lt;endl;\n    return 0;\n}\n\n堆优化版Dijkstra算法(适用于稀疏图)优点： \n\n堆可以动态维护一个集合中的最小值\n堆动态支持插入，删除，修改一个数\n\n","slug":"最短路","date":"2022-02-12T14:21:45.818Z","categories_index":"图论","tags_index":"图论,算法选择","author_index":"Snailuu"},{"id":"60a84708f3c49aa5488e16601f40a652","title":"算法选择","content":"\n\n\n\n\n\n\n\n\n   一个图中，顶点数记为n，边数记为m\n   当m时，称之为稀疏图\n   当m相对比较大时，称之为稠密图\n\n\n\n\ngraph LR\nA(最短路)\nB(单源最短路)\nC(多源汇最短路)\nD(所有边权都是正数)\nE(存在负权边)\nF(朴素Dijkstra算法)\nG(堆优化版的Dijkstra算法)\nH(Bellman-Ford)\nI(SPFA)\nJ(Floyd算法)\nA--&gt;B\nA--&gt;C\nB--&gt;D\nB--&gt;E\nD--&gt;|n^2|F\nD--&gt;|mlogn|G\nE--&gt;|nm|H\nE--&gt;|m  nm|I\nC--&gt;|n^3|J\n\n\ngraph LR\nA(最小生成树)\nB(Prim算法)\nC(Kruskal算法)\nD(朴素版Prim)\nE(二分图)\nF(染色法)\nG(匈牙利算法)\nA--&gt;B--&gt;|n^2|D\nA--&gt;|mlogm|C\nE--&gt;|n+m|F\nE--&gt;|mn|G\n\n\n\n储存方式\n\n\n\n\n\n\n\n\n   单链表：邻接表存储图和树\n   h[N]：表示头节点的下标\n   e[N]：某个节点的值\n   ne[N]：某个点的next指针是什么\n   idx：储存当前已经用到了哪个点\n   \n","slug":"算法选择","date":"2022-02-12T14:21:45.812Z","categories_index":"图论","tags_index":"图论,算法选择","author_index":"Snailuu"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"二分图","date":"2022-02-12T14:21:45.806Z","categories_index":"","tags_index":"","author_index":"Snailuu"}]