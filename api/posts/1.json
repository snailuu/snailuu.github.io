{"total":16,"pageSize":12,"pageCount":2,"data":[{"title":"模板","uid":"3c194b2f2319e046c85e1bc082983d3c","slug":"模板","date":"2022-02-16T08:35:59.408Z","updated":"2022-02-16T12:25:56.613Z","comments":true,"path":"api/articles/模板.json","cover":"https://pic.imgdb.cn/item/620c7b2d2ab3f51d91aff6f7.jpg","text":"本篇文章作为跳转文章，如需阅读模板请点击下方各类按钮基础算法数据结构","link":"","photos":[],"count_time":{"symbolsCount":34,"symbolsTime":"1 mins."},"categories":[{"name":"模板","slug":"模板","count":4,"path":"api/categories/模板.json"}],"tags":[],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"杂乱笔记","uid":"40516069856649c61c80ebcc0b14851f","slug":"杂点笔记","date":"2022-02-16T04:06:58.194Z","updated":"2022-02-16T04:18:02.956Z","comments":true,"path":"api/articles/杂点笔记.json","cover":"https://pic.imgdb.cn/item/620c7af22ab3f51d91afbaa6.jpg","text":"字符串 string类的插入insert(pos,string) 在下标pos和pos+1之间插入字符串string。 string类的删除earse(pos,num)从下标pos开始删除num个字符，如果num为空则删除pos后面的所有字符。 ","link":"","photos":[],"count_time":{"symbolsCount":124,"symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":1,"path":"api/categories/笔记.json"}],"tags":[{"name":"字符串","slug":"字符串","count":1,"path":"api/tags/字符串.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"错误之路","uid":"ef2958a60eebffed61302cfeed7e9fed","slug":"错误之路","date":"2022-02-16T02:58:30.254Z","updated":"2022-02-16T04:19:52.201Z","comments":true,"path":"api/articles/错误之路.json","cover":"https://pic.imgdb.cn/item/620a098b2ab3f51d9196f63a.jpg","text":"本篇文章用于记录学习之路/比赛上看似不起眼的小错误却又不得不重视的，一直都在更新…… 2022.02.15 res=pow(a,b) 当res为int类型时，b应该为常量。当res为double类型时，b应该为常量、int、double。 ","link":"","photos":[],"count_time":{"symbolsCount":121,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"搜索与图论模板","uid":"d11324b19b05ce1c671aea0ac57ea0cf","slug":"搜索与图论模板","date":"2022-02-17T03:41:35.497Z","updated":"2022-02-17T07:39:10.976Z","comments":true,"path":"api/articles/搜索与图论模板.json","cover":"https://pic.imgdb.cn/item/620dfb952ab3f51d91eca726.jpg","text":"树与图的存储 树是一种特殊的图（无向无环图），与图的存储方式相同 无向图就是特殊的有向图，存储两条边 和 邻接矩阵：g[a][b]存储边 邻接表： // 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点 int h[N], e[N], ne[N]...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"模板","slug":"模板","count":4,"path":"api/categories/模板.json"}],"tags":[{"name":"模板","slug":"模板","count":3,"path":"api/tags/模板.json"},{"name":"图论","slug":"图论","count":3,"path":"api/tags/图论.json"},{"name":"搜索","slug":"搜索","count":1,"path":"api/tags/搜索.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"Misha and Forest","uid":"c28259cd908768634e0a4505c18b8177","slug":"Misha and Forest","date":"2022-02-16T12:26:41.888Z","updated":"2022-02-17T02:35:08.027Z","comments":true,"path":"api/articles/Misha and Forest.json","cover":"https://pic.imgdb.cn/item/62091b402ab3f51d91da1db3.jpg","text":"原题链接：Codeforces Round #285 (Div. 2)C. Misha and Forest C. Misha and Forest Time limit:1000ms Memory limit:262144kb Let’s define a forest as ...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"codeforecs","slug":"codeforecs","count":1,"path":"api/categories/codeforecs.json"}],"tags":[{"name":"位运算","slug":"位运算","count":2,"path":"api/tags/位运算.json"},{"name":"拓扑排序","slug":"拓扑排序","count":1,"path":"api/tags/拓扑排序.json"},{"name":"树","slug":"树","count":1,"path":"api/tags/树.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"STL算法","uid":"2c4ac29383b35bd575e7e033cc42c68d","slug":"STL算法","date":"2022-02-16T10:51:19.371Z","updated":"2022-02-16T11:16:59.895Z","comments":true,"path":"api/articles/STL算法.json","cover":"https://pic.imgdb.cn/item/620cd76f2ab3f51d914e329b.jpg","text":"数组相关nth_element//重新排序[first,last)中的元素，使得新的nth元素前的所有元素小于或等于新的nth元素后的所有元素 std::nth_element(first, nth, last, cmp); //默认排序规则从小到大 应用：求第 大/小的数 ma...","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[{"name":"STL","slug":"STL","count":2,"path":"api/categories/STL.json"}],"tags":[{"name":"STL算法","slug":"STL算法","count":1,"path":"api/tags/STL算法.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"STL容器","uid":"dd310f63c22e1adb321e0e6222b0b1f9","slug":"STL容器","date":"2022-02-16T09:21:30.340Z","updated":"2022-02-16T10:50:55.872Z","comments":true,"path":"api/articles/STL容器.json","cover":"https://pic.imgdb.cn/item/620cc8d82ab3f51d9139bfcb.jpg","text":"vector 可变数组，倍增的思想 设vector&lt;int&gt;a,b a.size()返回a元素个数 a.empty()返回a是否为空 a.clear()清空数组a a.resize()调整a空间大小 a.swap(b) 将a中的元素和b中的元素整体交换 a.front...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"STL","slug":"STL","count":2,"path":"api/categories/STL.json"}],"tags":[{"name":"STL容器","slug":"STL容器","count":1,"path":"api/tags/STL容器.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"数据结构模板","uid":"1df484034a65ae4d42f3134f61bf20af","slug":"数据结构模板","date":"2022-02-16T06:09:33.395Z","updated":"2022-02-16T08:34:10.633Z","comments":true,"path":"api/articles/数据结构模板.json","cover":"https://pic.imgdb.cn/item/620c96192ab3f51d91d60f3a.jpg","text":"单链表 head存储表头，e[]存储节点的值,ne[]存储节点的next指针，idx表示当前用到了哪个节点 int head, e[N], ne[N], idx; // 初始化 void init() { head = -1; idx = 0; } // 在链表头插入一个数a v...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"模板","slug":"模板","count":4,"path":"api/categories/模板.json"}],"tags":[{"name":"模板","slug":"模板","count":3,"path":"api/tags/模板.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"回文字符串","uid":"768c5d200987ad0ffa01337632098c22","slug":"回文字符串","date":"2022-02-15T03:47:30.314Z","updated":"2022-02-16T08:56:46.660Z","comments":true,"path":"api/articles/回文字符串.json","cover":"https://pic.imgdb.cn/item/620cbc3d2ab3f51d91253ecd.jpg","text":"最长回文子序列 最长回文子序列 LPS（Longest Palindromic Subsequence） 状态表示：表示从 到 序列的最长回文子序列 代码 #include &lt;iostream&gt; #include &lt;algorithm&gt; #include ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"杂题","slug":"杂题","count":1,"path":"api/categories/杂题.json"}],"tags":[{"name":"回文字符串","slug":"回文字符串","count":1,"path":"api/tags/回文字符串.json"},{"name":"回文序列","slug":"回文序列","count":1,"path":"api/tags/回文序列.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"二进制问题","uid":"321148201d6e624da674378719102cb9","slug":"二进制","date":"2022-02-14T07:37:34.676Z","updated":"2022-02-16T03:07:17.417Z","comments":true,"path":"api/articles/二进制.json","cover":"https://pic.imgdb.cn/item/620c68f02ab3f51d919a55d1.jpg","text":"异或OR（半加法）： 异或符合加法性质（奇偶性） 奇+奇==偶 奇+偶==奇 偶+偶==偶 偶+奇==奇 ｀｀ 注：奇数-1，偶数+1 bitset bitset&lt;32&gt;q(n)定义为一个空间大小为，名为，内容为（可以为整数，） bitset就像普通的整数一样，可以进...","link":"","photos":[],"count_time":{"symbolsCount":607,"symbolsTime":"1 mins."},"categories":[{"name":"二进制","slug":"二进制","count":1,"path":"api/categories/二进制.json"}],"tags":[{"name":"位运算","slug":"位运算","count":2,"path":"api/tags/位运算.json"},{"name":"二进制","slug":"二进制","count":1,"path":"api/tags/二进制.json"},{"name":"bitset","slug":"bitset","count":1,"path":"api/tags/bitset.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"基础算法模板","uid":"cad29d88a5e84162d8735ff1cbc7e6a8","slug":"基础算法模板","date":"2022-02-14T04:49:54.725Z","updated":"2022-02-16T08:34:18.228Z","comments":true,"path":"api/articles/基础算法模板.json","cover":"https://pic.imgdb.cn/item/620a09c42ab3f51d91972f3d.jpg","text":"归并排序 确定分界点， 递归排序 归并——合二为一 void merge_sort(int q[], int l, int r)//q数组从l到r排序 { if (l &gt;= r) return;//出口 int mid = l + r &gt;&gt; 1;//分界点 me...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"模板","slug":"模板","count":4,"path":"api/categories/模板.json"}],"tags":[{"name":"模板","slug":"模板","count":3,"path":"api/tags/模板.json"},{"name":"基础算法","slug":"基础算法","count":1,"path":"api/tags/基础算法.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"背包问题","uid":"32c803d1fefb525b38a8f636ccbac12b","slug":"背包问题","date":"2022-02-13T12:09:32.829Z","updated":"2022-02-14T13:00:15.993Z","comments":true,"path":"api/articles/背包问题.json","cover":"https://pic.imgdb.cn/item/62091b852ab3f51d91da68e2.jpg","text":" 01背包例题：01背包问题 描述：有 件物品和一个容量为 的背包，每件物品有各自的价值且只能被选择一次，要求在有限的背包容量下，装入的物品总价值最大。 动态规划是不断决策求最优解的过程，「0-1 背包」即是不断对第 i 个物品的做出决策，「0-1」正好代表不选与选两种决定。 代...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"动态规划","slug":"动态规划","count":1,"path":"api/categories/动态规划.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":1,"path":"api/tags/动态规划.json"},{"name":"背包","slug":"背包","count":1,"path":"api/tags/背包.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}]}