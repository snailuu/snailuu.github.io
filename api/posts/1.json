{"total":28,"pageSize":12,"pageCount":3,"data":[{"title":"模板","uid":"3c194b2f2319e046c85e1bc082983d3c","slug":"模板","date":"2022-02-16T08:35:59.408Z","updated":"2022-04-18T01:55:36.940Z","comments":true,"path":"api/articles/模板.json","cover":"https://pic.imgdb.cn/item/620c7b2d2ab3f51d91aff6f7.jpg","text":"本篇文章作为跳转文章，如需阅读模板请点击下方各类按钮基础算法数据结构搜索与图论数学算法选择","link":"","photos":[],"count_time":{"symbolsCount":45,"symbolsTime":"1 mins."},"categories":[{"name":"模板","slug":"模板","count":2,"path":"api/categories/模板.json"}],"tags":[],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"杂乱笔记","uid":"40516069856649c61c80ebcc0b14851f","slug":"杂点笔记","date":"2022-02-16T04:06:58.194Z","updated":"2022-04-29T04:33:31.282Z","comments":true,"path":"api/articles/杂点笔记.json","cover":"https://pic.imgdb.cn/item/620c7af22ab3f51d91afbaa6.jpg","text":"字符串 string类的插入insert(pos,string) 在下标pos和pos+1之间插入字符串string。 string类的删除earse(pos,num)从下标pos开始删除num个字符，如果num为空则删除pos后面的所有字符。 数学 取模的顺序：一定要优先对可能...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"笔记","slug":"笔记","count":1,"path":"api/categories/笔记.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":3,"path":"api/tags/动态规划.json"},{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"字符串","slug":"字符串","count":1,"path":"api/tags/字符串.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"错误之路","uid":"ef2958a60eebffed61302cfeed7e9fed","slug":"错误之路","date":"2022-02-16T02:58:30.254Z","updated":"2022-04-29T04:32:38.576Z","comments":true,"path":"api/articles/错误之路.json","cover":"https://pic.imgdb.cn/item/620a098b2ab3f51d9196f63a.jpg","text":"本篇文章用于记录学习之路/比赛上看似不起眼的小错误却又不得不重视的，一直都在更新……单词专区 the maximal possible product of elements ：最大可能乘积的元素，product 乘积 positive integer：正整数 non-X ：非X...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"三元环","uid":"b906dec7c019d106b02095edae4e608a","slug":"三元环","date":"2022-05-11T00:56:59.379Z","updated":"2022-05-11T01:22:40.962Z","comments":true,"path":"api/articles/三元环.json","cover":"https://pic.imgdb.cn/item/627b0f4109475431298d7de3.jpg","text":"参考链接：三元环 三元环定义 给定一张无重边、无自环的无向图 点数为，边数为，且同阶 问有多少个无序三元组，使得存在： 有一条连接的边 有一条连接的边 有一条连接的边 这张图中有三个三元环：(1,2,3),(1,3,4),(3,4,5)(1,2,3),(1,3,4),(3,4,5...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"图论","slug":"图论","count":5,"path":"api/categories/图论.json"}],"tags":[{"name":"图论","slug":"图论","count":4,"path":"api/tags/图论.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"LCA问题","date":"2022-04-27T07:32:53.940Z","updated":"2022-04-28T01:48:49.105Z","comments":true,"path":"api/articles/LCA问题.json","cover":null,"text":"树上倍增法求解${\\color{Red}复杂度：O(nlogn+m)}$ f[i][j]表示第 i 个节点的$2^j$的祖宗节点 初始化深度数组和距离数组 void dfs(int u)&#123; for(int i&#x3D;h[u];~i;i&#x3D;ne[i])&#12...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"组合数学","uid":"e9aa53c6c1b77921f8bd9d5efce0b5e9","slug":"组合数学","date":"2022-04-26T08:07:54.153Z","updated":"2022-04-26T08:10:14.038Z","comments":true,"path":"api/articles/组合数学.json","cover":"https://pic.imgdb.cn/item/62091b402ab3f51d91da1db3.jpg","text":"引述棋盘的完美覆盖考虑一张普通的棋盘，它被分成8行8列共64个方格，假设有一些形状 ","link":"","photos":[],"count_time":{"symbolsCount":42,"symbolsTime":"1 mins."},"categories":[{"name":"组合数学","slug":"组合数学","count":1,"path":"api/categories/组合数学.json"}],"tags":[{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"数学定理","uid":"7a095ced649d33399ff48645a890fd32","slug":"数学定理","date":"2022-03-31T08:29:20.723Z","updated":"2022-03-31T08:48:56.176Z","comments":true,"path":"api/articles/数学定理.json","cover":"https://pic.imgdb.cn/item/620f57e32ab3f51d91cc1c24.jpg","text":"求两个数的没法组合生成的最小整数 给定两个数a和b，求无法由a和b运算得到的最小整数 设c为所求最小整数 则 ","link":"","photos":[],"count_time":{"symbolsCount":72,"symbolsTime":"1 mins."},"categories":[{"name":"数学","slug":"数学","count":3,"path":"api/categories/数学.json"}],"tags":[{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"动态规划","uid":"f6af5bf3fb5f66f52237908153c03aea","slug":"动态规划","date":"2022-03-25T14:21:33.199Z","updated":"2022-03-28T11:44:04.415Z","comments":true,"path":"api/articles/动态规划.json","cover":"https://pic.imgdb.cn/item/623dd06627f86abb2a22d851.jpg","text":"树形DP 一般树形dp都是用于树上问题，父亲与儿子的问题，找出动态转移方程式，用树的遍历对其进行赋值 一般存图可以用链表，邻接矩阵，链式前向星等等，可以用数组模拟或者vector模拟； 例题： 选择节点类生活在树上 题目描述： ZHR 住在一有根棵树上（1 号节点为根），树上的每...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"动态规划","slug":"动态规划","count":2,"path":"api/categories/动态规划.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":3,"path":"api/tags/动态规划.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"高级数据结构","uid":"b6a047059c4e5c0a07c0203b5ded3378","slug":"高级数据结构","date":"2022-03-15T11:56:14.444Z","updated":"2022-04-24T11:04:44.578Z","comments":true,"path":"api/articles/高级数据结构.json","cover":"https://pic.imgdb.cn/item/6231714e5baa1a80abc79d44.jpg","text":"树状数组解决问题类型： 单点修改 区间查询 核心函数#define lowbit(x) ((x)&amp;(-x)) int tr[N]; void add(int x,int v){ for(int i = x; i &lt;= n; i += lowbit(i)) tr[i]...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"备战蓝桥杯","uid":"c486680c6ae6acdf2cecc52289734516","slug":"备战蓝桥杯","date":"2022-03-08T07:55:21.904Z","updated":"2022-04-04T02:24:26.656Z","comments":true,"path":"api/articles/备战蓝桥杯.json","cover":"https://pic.imgdb.cn/item/62270c705baa1a80ab349a19.jpg","text":"注意事项数据范围太大时使用scanf和printf输入和输出 int类型大概支持数据范围在 1e8左右，超过这个数的全部直接long long 数学求两个数的没法组合生成的最小整数 给定两个数a和b，求无法由a和b运算得到的最小整数 设c为所求最小整数 则 算术基本定理(唯一分解...","link":"","photos":[],"count_time":{"symbolsCount":403,"symbolsTime":"1 mins."},"categories":[{"name":"蓝桥杯","slug":"蓝桥杯","count":1,"path":"api/categories/蓝桥杯.json"}],"tags":[{"name":"蓝桥杯","slug":"蓝桥杯","count":1,"path":"api/tags/蓝桥杯.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"贪心总结","uid":"4055c80e84a3b6eaa6e959bbd1b51e6a","slug":"贪心总结","date":"2022-03-06T06:40:28.608Z","updated":"2022-04-02T12:52:08.491Z","comments":true,"path":"api/articles/贪心总结.json","cover":"https://pic.imgdb.cn/item/62270c945baa1a80ab34b350.jpg","text":"均分纸牌设总人数有 个，纸牌总数有 张，每个人初始纸牌数量为 ，则每个人最终拥有的纸牌数量均为 记作 在方案存在的情况下 第1个人为了达到平均数，需要向第2个人传递 数量的纸牌，（正表示拿，负表示给） 第2个人为了达到平均数，需要向第3个人传递 数量的纸牌 … … 第n-1个人为...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"贪心","slug":"贪心","count":1,"path":"api/categories/贪心.json"}],"tags":[{"name":"贪心","slug":"贪心","count":1,"path":"api/tags/贪心.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"逆元","uid":"e7c582089fc58c53917014ad61ddc86d","slug":"逆元","date":"2022-03-02T13:40:44.841Z","updated":"2022-04-24T12:33:35.623Z","comments":true,"path":"api/articles/逆元.json","cover":"https://pic.imgdb.cn/item/621f74715baa1a80ab0be146.jpg","text":"乘法逆元拓展欧几里得时间复杂度： 假设n为模数，如果 不是质数时可以用拓展欧几里得算法求逆元： 有逆元的充要条件是 与 互质，所以 假设 的逆元为 ，那么 等价于 求 ，用拓展欧几里得递归到最后x为 int exgcd(int a, int b, int &amp;x, int ...","link":"","photos":[],"count_time":{"symbolsCount":913,"symbolsTime":"1 mins."},"categories":[{"name":"数学","slug":"数学","count":3,"path":"api/categories/数学.json"}],"tags":[{"name":"数论","slug":"数论","count":1,"path":"api/tags/数论.json"},{"name":"逆元","slug":"逆元","count":1,"path":"api/tags/逆元.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}]}