{"title":"图论最短路问题","uid":"aa03b2f0abb625816c3d81ed8f81147b","slug":"图论最短路","date":"2022-02-20T13:19:08.472Z","updated":"2022-07-15T05:12:32.852Z","comments":true,"path":"api/articles/图论最短路.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62091b5f2ab3f51d91da3fbb.jpg","content":"<h2 id=\"朴素版Dijkstra算法-适用于稠密图\"><a href=\"#朴素版Dijkstra算法-适用于稠密图\" class=\"headerlink\" title=\"朴素版Dijkstra算法(适用于稠密图)\"></a>朴素版Dijkstra算法(适用于稠密图)</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>初始化距离数组和邻接矩阵（无穷大）</li>\n<li>处理重边问题在输入取最小值</li>\n<li>每次找到一个最小的未更新的答案点</li>\n<li>将其连边答案全部更新</li>\n</ol>\n<p><em>例题：</em><a href=\"https://www.acwing.com/problem/content/851/\">Dijkstra算法朴素版</a></p>\n<p>代码实现如下：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 520, INF = 0x3f3f3f3f;\nint n, m;\nint g[N][N], dis[N];\nbool st[N];\n\nint dijkstra()\n{\n    dis[1] = 0; //每个点到一号点的最短距离\n    //如需求到s点的一开始将dis[s]定义为0即可\n    for (int i = 0; i &lt; n - 1; i++)\n    {\n        int t = -1;\n        for (int j = 1; j &lt;= n; j++)\n        {\n            if (!st[j] &amp;&amp; (t == -1 || dis[t] &gt; dis[j]))\n                t = j; //找到当前未更新的最小点\n        }\n        for (int j = 1; j &lt;= n; j++)\n            dis[j] = min(dis[j], dis[t] + g[t][j]); //将t连接的点都更新最短距离\n        st[t] = true;\n    }\n    if (dis[n] == 0x3f3f3f3f)\n        return -1; // 1~n之间不连通，无法构成路径，也就没有最短距离\n    return dis[n];\n}\nint main()\n{\n    cin &gt;&gt; n &gt;&gt; m;\n    fill(g[0], g[0] + N * N, INF);\n    fill(dis, dis + N, INF);\n    while (m--)\n    {\n        int x, y, c;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; c;\n        g[x][y] = min(g[x][y], c); //处理重边\n    }\n    cout &lt;&lt; dijkstra() &lt;&lt; endl;\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"堆优化版Dijkstra算法-适用于稀疏图\"><a href=\"#堆优化版Dijkstra算法-适用于稀疏图\" class=\"headerlink\" title=\"堆优化版Dijkstra算法(适用于稀疏图)\"></a>堆优化版Dijkstra算法(适用于稀疏图)</h2><p><strong>优点：</strong> </p>\n<ol>\n<li>堆可以动态维护一个集合中的最小值</li>\n<li>堆动态支持插入，删除，修改一个数</li>\n</ol>\n<p><strong>优化部分：</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">for(int j=1;j&lt;=n;j++)\n{\n    if(!st[j]&amp;&amp;(t==-1||dis[t]&gt;dis[j])) t=j;//找到当前未更新的最小点\n}\n//每次寻找一个最小值可以用堆来维护一个最小值\n//复杂度从O(n)-&gt;O(1)\n////////////////////////////////////////////\nfor(int j=1;j&lt;=n;j++)\n    dis[j]=min(dis[j],dis[t]+g[t][j]);//将t连接的点都更新最短距离\n//每次将点更新在堆中修改复杂度为mlogm\n//复杂度从O(n)-&gt;O(mlogm)\n//////////////////////////////////////////////\n//总体复杂度从O(n^2)-&gt;O(mlogm)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>例题：</em><a href=\"https://www.acwing.com/problem/content/852/\">Dijkstra算法堆优化版</a></p>\n<p><strong>代码实现：</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\n#define PII pair&lt;int, int&gt;\nusing namespace std;\n\nconst int N = 1e6 + 10, INF = 0x3f3f3f3f;\nint n, m;\nint h[N], e[N], ne[N], idx;\nint dis[N], w[N];\nbool st[N];\n\nvoid add(int a, int b, int c)\n{\n    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;\n}\nint dijkstra()\n{\n    fill(dis, dis + N, INF);\n    dis[1] = 0;\n    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; //优先队列默认大根堆，这样子写可以维护小根堆,pair&lt;int,int&gt;第一个值存数值，第二个值存下标\n    heap.push({0, 1});\n    while (heap.size())\n    {\n        auto t = heap.top();\n        heap.pop();\n        int ver = t.second, distance = t.first;\n        if (st[ver]) continue; //每次处理均为最小值且未处理过的\n        st[ver] = true;\n        for (int i = h[ver]; i != -1; i = ne[i])\n        {\n            int j = e[i];\n            if (dis[j] &gt; dis[ver] + w[i]) //有更短路就替换\n            {\n                dis[j] = dis[ver] + w[i];\n                heap.push({dis[j], j}); //将新的方案加入到队列中\n            }\n        }\n    }\n    //队列为空即走完整个图\n    if (dis[n] == INF)\n        return -1;\n    return dis[n];\n}\nint main()\n{\n    cin &gt;&gt; n &gt;&gt; m;\n    fill(h, h + N, -1); //将头结点数组全部初始化成-1\n    while (m--)\n    {\n        int x, y, c;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; c;\n        add(x, y, c);\n    }\n    cout &lt;&lt; dijkstra() &lt;&lt; endl;\n    return 0;\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"SPFA算法（适用于稀疏图）\"><a href=\"#SPFA算法（适用于稀疏图）\" class=\"headerlink\" title=\"SPFA算法（适用于稀疏图）\"></a>SPFA算法（适用于稀疏图）</h2><p><del>Bellman-Ford太呆</del></p>\n<p><strong>优点：</strong></p>\n<ol>\n<li>每次只更新与结点有关点的最小距离</li>\n</ol>\n<p><em>例题：</em><a href=\"https://www.acwing.com/problem/content/853/\">SPFA求最短路</a></p>\n<p><strong>代码实现：</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5 + 10, INF = 0x3f3f3f3f;\nint h[N], e[N], ne[N], w[N], idx; //稀疏图用邻接表来存图\nint n, m;\nint dist[N];\nbool st[N];\n\nvoid add(int a, int b, int c)\n{\n    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;\n}\nint spfa()\n{\n    fill(dist, dist + N, INF); //先将每个到源点的距离初始化成正无穷\n    dist[1] = 0;\n    queue&lt;int&gt; q;\n    q.push(1);\n    st[1] = true;\n    while (q.size())\n    {\n        int t = q.front();\n        q.pop();\n        st[t] = false; //出队了\n        for (int i = h[t]; i != -1; i = ne[i])\n        {\n            int j = e[i];\n            if (dist[j] &gt; dist[t] + w[i]) //更新t结点的所有距离\n            {\n                dist[j] = dist[t] + w[i];\n                if (!st[j])\n                {\n                    q.push(j); //更新的点第一次访问就进度，后面可能还能再利用其更新其他点\n                    st[j] = true;\n                }\n            }\n        }\n    }\n    return dist[n];\n}\nint main()\n{\n    cin &gt;&gt; n &gt;&gt; m;\n    memset(h, -1, sizeof h);\n    while (m--)\n    {\n        int a, b, c;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n        add(a, b, c);\n    }\n    int t = spfa();\n    if (t == INF) //如果到n点还无法更新距离说明无法连通\n        puts(\"impossible\");\n    else\n        cout &lt;&lt; t &lt;&lt; endl;\n    return 0;\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"KM算法-dfs（-O-n-4\"><a href=\"#KM算法-dfs（-O-n-4\" class=\"headerlink\" title=\"KM算法-dfs（$O(n^4)$\"></a>KM算法-dfs（<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.832ex\" height=\"2.47ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841.7 2577.6 1091.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1152,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,363) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2188.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></h2><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdio&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\ntypedef long long ll;\nconst int maxn = 300 + 10;\nconst int INF = 0x3f3f3f3f;\n\nint wx[maxn], wy[maxn];//每个点的顶标值（需要根据二分图处理出来）\nint cx[maxn], cy[maxn];//每个点所匹配的点\nint visx[maxn], visy[maxn];//每个点是否加入增广路\nint cntx, cnty;//分别是X和Y的点数\nint Map[maxn][maxn];//二分图边的权值\nint slack[maxn];//边权和顶标最小的差值\n\nbool dfs(int u)//进入DFS的都是X部的点\n{\n    visx[u] = 1;//标记进入增广路\n    for(int v = 1; v &lt;= cnty; v++)\n    {\n        if(!visy[v] &amp;&amp; Map[u][v] != INF)//如果Y部的点还没进入增广路,并且存在路径\n        {\n            int t = wx[u] + wy[v] - Map[u][v];\n            if(t == 0)//t为0说明是相等子图\n            {\n                visy[v] = 1;//加入增广路\n\n                //如果Y部的点还未进行匹配\n                //或者已经进行了匹配，可以从原来的匹配反向找到增广路\n                //那就可以进行匹配\n                if(cy[v] == -1 || dfs(cy[v]))\n                {\n                    cx[u] = v;\n                    cy[v] = u;//进行匹配\n                    return 1;\n                }\n            }\n            else if(t &gt; 0)//此处t一定是大于0，因为顶标之和一定&gt;=边权\n            {\n                slack[v] = min(slack[v], t);\n                //slack[v]存的是Y部的点需要变成相等子图顶标值最小增加多少\n            }\n        }\n    }\n    return false;\n}\n\nint KM()\n{\n    memset(cx, -1, sizeof(cx));\n    memset(cy, -1, sizeof(cy));\n    memset(wx, 0, sizeof(wx));//wx的顶标为该点连接的边的最大权值\n    memset(wy, 0, sizeof(wy));//wy的顶标为0\n    for(int i = 1; i &lt;= cntx; i++)//预处理出顶标值\n    {\n        for(int j = 1; j &lt;= cnty; j++)\n        {\n            if(Map[i][j] == INF)continue;\n            wx[i] = max(wx[i], Map[i][j]);\n        }\n    }\n    for(int i = 1; i &lt;= cntx; i++)//枚举X部的点\n    {\n        memset(slack, INF, sizeof(slack));\n        while(1)\n        {\n\n            memset(visx, 0, sizeof(visx));\n            memset(visy, 0, sizeof(visy));\n            if(dfs(i))break;//已经匹配正确\n\n\n            int minz = INF;\n            for(int j = 1; j &lt;= cnty; j++)\n                if(!visy[j] &amp;&amp; minz &gt; slack[j])\n                    //找出还没经过的点中，需要变成相等子图的最小额外增加的顶标值\n                    minz = slack[j];\n            //和全局变量不同的是，全局变量在每次while循环中都需要赋值成INF，每次求出的是所有点的最小值\n            //而slack数组在每个while外面就初始化好，每次while循环slack数组的每个值都在用到\n            //在一次增广路中求出的slack值会更准确，循环次数比全局变量更少\n\n\n            //还未匹配，将X部的顶标减去minz，Y部的顶标加上minz\n            for(int j = 1; j &lt;= cntx; j++)\n                if(visx[j])wx[j] -= minz;\n            for(int j = 1; j &lt;= cnty; j++)\n                //修改顶标后，要把所有不在交错树中的Y顶点的slack值都减去minz\n                if(visy[j])wy[j] += minz;\n                else slack[j] -= minz;\n        }\n    }\n\n    int ans = 0;//二分图最优匹配权值\n    for(int i = 1; i &lt;= cntx; i++)\n        if(cx[i] != -1)ans += Map[i][cx[i]];\n    return ans;\n}\nint n, k;\nint main()\n{\n    while(scanf(\"%d\", &amp;n) != EOF)\n    {\n        for(int i = 1; i &lt;= n; i++)\n        {\n            for(int j = 1; j &lt;= n; j++)\n                scanf(\"%d\", &amp;Map[i][j]);\n        }\n        cntx = cnty = n;\n        printf(\"%d\\n\", KM());\n    }\n    return 0;\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"KM算法-BFS-O-3\"><a href=\"#KM算法-BFS-O-3\" class=\"headerlink\" title=\"KM算法-BFS($O^3$)\"></a>KM算法-BFS(<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.714ex\" height=\"1.935ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.2 1199.6 855.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(796,363) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></g></g></svg></mjx-container>)</h2><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;map&gt;\n#include&lt;queue&gt;\n\n#define ll long long \nusing namespace std;\n\nconst int MAXN=510;\n\nint n,m;\nint e[MAXN][MAXN];\n\nint lx[MAXN],ly[MAXN],slack[MAXN];\nint px[MAXN],py[MAXN],pre[MAXN];\nbool vx[MAXN],vy[MAXN];\n\nqueue&lt;int&gt; q;\nvoid aug(int v)\n{\n\tint t;\n\twhile(v)\n\t{\n\t\tt=px[pre[v]];\n\t\tpx[pre[v]]=v;\n\t\tpy[v]=pre[v];\n\t\tv=t;\n\t}\n}\nvoid bfs(int s)\n{\n\tmemset(vx,0,sizeof(vx));\n\tmemset(vy,0,sizeof(vy));\n\tfill(slack+1,slack+n+1,inf);\n\t\n\twhile(!q.empty())q.pop();\n\tq.push(s);\n\t\n\twhile(1)\n\t{\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint u=q.front();q.pop();\n\t\t\tvx[u]=1;\n\t\t\tfor(int i=1;i&lt;=n;++i)if(!vy[i])\n\t\t\t{\n\t\t\t\tif(lx[u]+ly[i]-e[u][i]&lt;slack[i])\n\t\t\t\t{\n\t\t\t\t\tslack[i]=lx[u]+ly[i]-e[u][i];\n\t\t\t\t\tpre[i]=u;\n\t\t\t\t\tif(slack[i]==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvy[i]=1;\n\t\t\t\t\t\tif(!py[i]){aug(i);return;}\n\t\t\t\t\t\telse q.push(py[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint d=inf;\n\t\tfor(int i=1;i&lt;=n;++i)if(!vy[i])d=min(d,slack[i]);\n\t\tfor(int i=1;i&lt;=n;++i)\n\t\t{\n\t\t\tif(vx[i])lx[i]-=d;\n\t\t\tif(vy[i])ly[i]+=d;else slack[i]-=d;\n\t\t}\n\t\tfor(int i=1;i&lt;=n;++i)if(!vy[i])\n\t\t{\n\t\t\tif(slack[i]==0)\n\t\t\t{\n\t\t\t\tvy[i]=1;\n\t\t\t\tif(!py[i]){aug(i);return;}\n\t\t\t\telse q.push(py[i]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tfor(int i=1;i&lt;=n;++i)bfs(i);\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":false,"text":"朴素版Dijkstra算法(适用于稠密图)思路 初始化距离数组和邻接矩阵（无穷大） 处理重边问题在输入取最小值 每次找到一个最小的未更新的答案点 将其连边答案全部更新 例题：Dijkstra算法朴素版 代码实现如下： #include &lt;bits/stdc++.h&gt; ...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"图论","slug":"图论","count":7,"path":"api/categories/图论.json"}],"tags":[{"name":"最短路","slug":"最短路","count":2,"path":"api/tags/最短路.json"},{"name":"稠密图","slug":"稠密图","count":1,"path":"api/tags/稠密图.json"},{"name":"稀疏图","slug":"稀疏图","count":1,"path":"api/tags/稀疏图.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%B4%E7%B4%A0%E7%89%88Dijkstra%E7%AE%97%E6%B3%95-%E9%80%82%E7%94%A8%E4%BA%8E%E7%A8%A0%E5%AF%86%E5%9B%BE\"><span class=\"toc-text\">朴素版Dijkstra算法(适用于稠密图)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E4%BC%98%E5%8C%96%E7%89%88Dijkstra%E7%AE%97%E6%B3%95-%E9%80%82%E7%94%A8%E4%BA%8E%E7%A8%80%E7%96%8F%E5%9B%BE\"><span class=\"toc-text\">堆优化版Dijkstra算法(适用于稀疏图)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SPFA%E7%AE%97%E6%B3%95%EF%BC%88%E9%80%82%E7%94%A8%E4%BA%8E%E7%A8%80%E7%96%8F%E5%9B%BE%EF%BC%89\"><span class=\"toc-text\">SPFA算法（适用于稀疏图）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#KM%E7%AE%97%E6%B3%95-dfs%EF%BC%88-O-n-4\"><span class=\"toc-text\">KM算法-dfs（</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#KM%E7%AE%97%E6%B3%95-BFS-O-3\"><span class=\"toc-text\">KM算法-BFS()</span></a></li></ol>","author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"某些可能有用的链接","uid":"92e9e21f40cabb2aa99ef90279e6b57e","slug":"不知名文章","date":"2022-02-21T13:33:14.265Z","updated":"2022-02-21T14:19:36.117Z","comments":true,"path":"api/articles/不知名文章.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62139f712ab3f51d91ff3728.jpg","text":"2022/2/21 upd: 不知道链接能活多久 本文不定期更新 支持推荐，如果有什么你觉得很有意义的文章/工具，欢迎把链接发送给我。 Tools (about Competitive Programming) :Csacademy Graph Editor（画“图”） Data...","link":"","photos":[],"count_time":{"symbolsCount":905,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"矩阵的数量V3","uid":"3066e00b6cf820c21780a6c4e3135165","slug":"矩阵的数量V3","date":"2022-02-19T09:53:53.021Z","updated":"2022-02-19T13:56:22.804Z","comments":true,"path":"api/articles/矩阵的数量V3.json","keywords":null,"cover":"https://pic.imgdb.cn/item/6210f6fe2ab3f51d91bac1ff.jpg","text":"题目链接：矩形的数量 V3 矩形的数量 V3 Time limit : 1000ms Memory limit: 131072 kb 一个m乘n的方格图，有多少个大小不同的正方形。 例如：4*3的方格中共有20个，其中： 12个 6个 2个 Input 共一行：2个数m,n，对应...","link":"","photos":[],"count_time":{"symbolsCount":884,"symbolsTime":"1 mins."},"categories":[{"name":"杂题","slug":"杂题","count":2,"path":"api/categories/杂题.json"}],"tags":[{"name":"数学知识","slug":"数学知识","count":1,"path":"api/tags/数学知识.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}