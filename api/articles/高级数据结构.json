{"title":"高级数据结构","uid":"b6a047059c4e5c0a07c0203b5ded3378","slug":"高级数据结构","date":"2022-03-15T11:56:14.444Z","updated":"2022-04-24T11:04:44.578Z","comments":true,"path":"api/articles/高级数据结构.json","keywords":null,"cover":"https://pic.imgdb.cn/item/6231714e5baa1a80abc79d44.jpg","content":"<h2 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h2><p>解决问题类型<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.695ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3401 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1152,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1450,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1935,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(2412,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3012,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container>：</p>\n<ol>\n<li>单点修改</li>\n<li>区间查询</li>\n</ol>\n<h3 id=\"核心函数\"><a href=\"#核心函数\" class=\"headerlink\" title=\"核心函数\"></a>核心函数</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#define lowbit(x) ((x)&amp;(-x))\nint tr[N];\nvoid add(int x,int v){\n    for(int i = x; i &lt;= n; i += lowbit(i)) tr[i] += v;\n}\nint query(int x){\n    int res = 0;\n    for(int i = x; i; i -= lowbit(i)) res += tr[i];\n    return res;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"单点更新-区间查询\"><a href=\"#单点更新-区间查询\" class=\"headerlink\" title=\"单点更新 区间查询\"></a>单点更新 区间查询</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#define lowbit(x) ((x)&amp;(-x))\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint  a[N], tr[N];\nvoid add(int x,int v){\n    for(int i = x; i &lt;= n; i += lowbit(i)) tr[i] += v;\n}\nint query(int x){\n    int res = 0;\n    for(int i = x; i; i -= lowbit(i)) res += tr[i];\n    return res;\n}\nint main(){\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    for(int i = 1; i &lt;= n; i++) add(i, a[i]);\n    while(m--){\n        int l, r;\n        scanf(\"%d %d\", &amp;l, &amp;r);\n        cout &lt;&lt; query(r) - query(l - 1) &lt;&lt; endl;\n    }\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"区间更新-单点查询\"><a href=\"#区间更新-单点查询\" class=\"headerlink\" title=\"区间更新 单点查询\"></a>区间更新 单点查询</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#define lowbit(x) ((x)&amp;(-x))\nusing namespace std;\nconst int N = 100010;\nint n, m;\nint a[N], tr[N];\nvoid add(int x,int v){\n    for(int i = x; i &lt;= n; i += lowbit(i)) tr[i] += v;\n}\nint query(int x){\n    int res = 0;\n    for(int i = x; i; i -= lowbit(i)) res += tr[i];\n    return res;\n}\nvoid insert(int l, int r, int v) {\n    add(l,v); \n    add(r+1,-v);     \n}\nint main(){\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= n; i++) insert(i, i, a[i]);\n    while(m--){\n        int l, r, k;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n        insert(l, r, k);\n    }\n    for(int i = 1; i &lt;=n; i++){\n        cout &lt;&lt; query(i) &lt;&lt; \" \";\n    }\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"区间更新-区间查询\"><a href=\"#区间更新-区间查询\" class=\"headerlink\" title=\"区间更新 区间查询\"></a>区间更新 区间查询</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#define lowbit(x) ((x)&amp;(-x))\nusing namespace std;\nconst int N =100010;\nint n, m;\nint a[N, tr1[N], tr2[N];\nvoid add(int x, int v){\n    for(int i = x; i &lt;= n; i+=lowbit(i)){\n        tr1[i] += v;\n        tr2[i] += v * (x - 1);\n    }\n}\nint querySum(int x){\n    int res = 0;\n    for(int i = x; i; i-=lowbit(i))\n        res += x * tr1[i] - tr2[i];\n    return res;\n}\nint queryNum(int x){ \n    int res = 0;\n    for(int i = x; i; i-=lowbit(i))\n        res += tr1[i];\n    return res;\n}\nvoid insert(int l, int r, int v){\n    add(l, v);\n    add(r+1,-v);\n}\nint main(){\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= n; i++) insert(i, i, a[i]);\n    while(m--){\n        int l, r;\n        scanf(\"%d %d\", &amp;l, &amp;r);\n        cout &lt;&lt; querySum(r) - querySum(l - 1) &lt;&lt; endl;\n    }\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"线段树\"><a href=\"#线段树\" class=\"headerlink\" title=\"线段树\"></a>线段树</h2><h3 id=\"加法\"><a href=\"#加法\" class=\"headerlink\" title=\"加法\"></a>加法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cstring&gt;\n#include&lt;cstdio&gt;\n#define ll long long \nusing namespace std;\nconst int N=1e5+10;\nll w[N];\nstruct node{\n    int l,r;\n    ll sum,lazy;\n}tr[N*4];\n//回溯更新\nvoid push_up(int u){\n    tr[u].sum=tr[u&lt;&lt;1].sum+tr[u&lt;&lt;1|1].sum;\n}\n//push_down向下传递式更新、记录\nvoid push_down(int u){\n    if(tr[u].lazy){\n        tr[u&lt;&lt;1].sum+=(tr[u&lt;&lt;1].r-tr[u&lt;&lt;1].l+1)*tr[u].lazy;\n        tr[u&lt;&lt;1|1].sum+=(tr[u&lt;&lt;1|1].r-tr[u&lt;&lt;1|1].l+1)*tr[u].lazy;\n        tr[u&lt;&lt;1].lazy+=tr[u].lazy;\n        tr[u&lt;&lt;1|1].lazy+=tr[u].lazy;\n        tr[u].lazy=0;\n    }\n}\n//建树\nvoid build(int u,int l,int r){\n    tr[u]={l,r};\n    if(l==r)tr[u].sum=w[r];\n    else {\n        int mid=l+r&gt;&gt;1;\n        build(u&lt;&lt;1,l,mid),build(u&lt;&lt;1|1,mid+1,r);\n        push_up(u);\n    }\n}\n//区间修改\nvoid modify(int u,int l,int r,int x){\n    if(l&lt;=tr[u].l&amp;&amp;r&gt;=tr[u].r){\n        tr[u].sum+=(ll)x*(tr[u].r-tr[u].l+1);\n        tr[u].lazy+=x;\n        return;\n    }  \n    push_down(u);\n    int mid=tr[u].l+tr[u].r&gt;&gt;1;\n    if(l&lt;=mid)modify(u&lt;&lt;1,l,r,x);\n    if(r&gt;mid)modify(u&lt;&lt;1|1,l,r,x);\n    push_up(u);\n}\n//区间查询\nll query(int u,int l,int r){\n    if(l&lt;=tr[u].l&amp;&amp;r&gt;=tr[u].r) return tr[u].sum;\n    push_down(u);\n    int mid=tr[u].l+tr[u].r&gt;&gt;1;\n    ll sum=0;\n    if(l&lt;=mid)sum+=query(u&lt;&lt;1,l,r);\n    if(r&gt;mid)sum+=query(u&lt;&lt;1|1,l,r);\n    return sum;\n}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&amp;n,&amp;m);\n    for(int i=1;i&lt;=n;i++)scanf(\"%lld\",&amp;w[i]);\n    build(1,1,n);\n    for(int i=1;i&lt;=m;i++){\n        int k,l,r,x;\n        scanf(\"%d\",&amp;k);\n        if(k==1){\n            scanf(\"%d %d %d\",&amp;l,&amp;r,&amp;x);\n            modify(1,l,r,x);\n        }else {\n            scanf(\"%d %d\",&amp;l,&amp;r);\n            printf(\"%lld\\n\",(ll)query(1,l,r));\n        }\n    }\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"加乘混合\"><a href=\"#加乘混合\" class=\"headerlink\" title=\"加乘混合\"></a>加乘混合</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cstring&gt;\n#define ll long long \nusing namespace std;\n\nconst int N=1e5+10;\nint w[N];\nint n,m,p;\nstruct node{\n    ll l,r;\n    ll sum,add,mul;\n}tr[N*4];\n//向上更新\nvoid push_up(int u){\n    tr[u].sum=(tr[u&lt;&lt;1].sum+tr[u&lt;&lt;1|1].sum)%p;\n}\n//建树\nvoid build(int u,ll l,ll r){\n    tr[u]={l,r};tr[u].mul=1;\n    if(l==r) {\n        tr[u].sum=w[l]%p;\n        return;\n    }\n    ll mid = (l+r)&gt;&gt;1;\n    build(u&lt;&lt;1,l,mid),build(u&lt;&lt;1|1,mid+1,r);\n    push_up(u);\n}\n//向下传递式记录\nvoid push_down(int u){\n    tr[u&lt;&lt;1].sum=(ll)((tr[u].mul*tr[u&lt;&lt;1].sum)%p+((tr[u&lt;&lt;1].r-tr[u&lt;&lt;1].l+1)*tr[u].add)%p)%p;\n    tr[u&lt;&lt;1|1].sum=(ll)((tr[u].mul*tr[u&lt;&lt;1|1].sum)%p+((tr[u&lt;&lt;1|1].r-tr[u&lt;&lt;1|1].l+1)*tr[u].add)%p)%p;\n    \n    tr[u&lt;&lt;1].mul=(ll)(tr[u&lt;&lt;1].mul*tr[u].mul)%p;\n    tr[u&lt;&lt;1|1].mul=(ll)(tr[u&lt;&lt;1|1].mul*tr[u].mul)%p;\n    \n    tr[u&lt;&lt;1].add=(ll)(tr[u&lt;&lt;1].add*tr[u].mul%p+tr[u].add)%p;\n    tr[u&lt;&lt;1|1].add=(ll)(tr[u&lt;&lt;1|1].add*tr[u].mul%p+tr[u].add)%p;\n    \n    tr[u].mul=1,tr[u].add=0;\n}\n//处理区间加法\nvoid add(int u,ll l,ll r,ll k){\n    if(l&lt;=tr[u].l&amp;&amp;r&gt;=tr[u].r){\n        tr[u].add=(tr[u].add+k)%p;\n        tr[u].sum=(ll)((tr[u].r-tr[u].l+1)*k+tr[u].sum)%p;\n        return ;\n    }\n    push_down(u);\n    push_up(u);\n    ll mid = (tr[u].l+tr[u].r)&gt;&gt;1;\n    if(l&lt;=mid) add(u&lt;&lt;1,l,r,k);\n    if(r&gt;mid) add(u&lt;&lt;1|1,l,r,k);\n    push_up(u);\n}\n//处理区间乘法\nvoid mul(int u,ll l,ll r,ll k){\n    if(l&lt;=tr[u].l&amp;&amp;r&gt;=tr[u].r){\n        tr[u].add=(tr[u].add*k)%p;\n        tr[u].mul=(tr[u].mul*k)%p;\n        tr[u].sum=(tr[u].sum*k)%p;\n        return;\n    }\n    push_down(u);\n    push_up(u);\n    ll mid = (tr[u].l+tr[u].r)&gt;&gt;1;\n    if(l&lt;=mid) mul(u&lt;&lt;1,l,r,k);\n    if(r&gt;mid) mul(u&lt;&lt;1|1,l,r,k);\n    push_up(u);\n}\n//区间询问权值和\nll query(int u,int l,int r){\n    if(l&lt;=tr[u].l&amp;&amp;r&gt;=tr[u].r)return tr[u].sum;\n    push_down(u);\n    ll mid=(tr[u].l+tr[u].r)&gt;&gt;1;\n    ll sum=0;\n    if(l&lt;=mid) sum=(sum+query(u&lt;&lt;1,l,r))%p;\n    if(r&gt;mid) sum=(sum+query(u&lt;&lt;1|1,l,r))%p;\n    return sum;\n}\nint main(){\n    cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;\n    for(int i=1;i&lt;=n;i++)cin&gt;&gt;w[i];\n    build(1,1,n);\n    while(m--){\n        int num,x,y,k;\n        cin&gt;&gt;num;\n        if(num==1){\n            cin&gt;&gt;x&gt;&gt;y&gt;&gt;k;\n            mul(1,x,y,k);\n        }else if(num==2){\n            cin&gt;&gt;x&gt;&gt;y&gt;&gt;k;\n            add(1,x,y,k);\n        }else {\n            cin&gt;&gt;x&gt;&gt;y;\n            cout&lt;&lt;(ll)query(1,x,y)&lt;&lt;endl;\n        }\n    }\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Manacher算法\"><a href=\"#Manacher算法\" class=\"headerlink\" title=\"Manacher算法\"></a>Manacher算法</h2><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int N=2e7+10;\nchar s[N],s_new[N];\nint p[N];//以i为中心的最长回文字符串长度\nint Init(){\n    int len=strlen(s);\n    s_new[0]='&amp;',s_new[1]='#';\n    int j=2;\n    for(int i=0;i&lt;len;i++){\n        s_new[j++]=s[i];\n        s_new[j++]='#';\n    }\n    s_new[j++]='^';\n    return j;\n}\n\n\nint Manacher(){\n    int len=Init();\n    int max_len=-1;\n    int id;\n    int mx=0;\n    for(int i=1;i&lt;len;i++){\n        if(i&lt;mx) p[i]=min(p[2*id-i],mx-i);\n        else p[i]=1;\n        while(s_new[i-p[i]]==s_new[i+p[i]])p[i]++;\n        if(mx&lt;i+p[i]){\n            id=i;\n            mx=i+p[i];\n        }\n        max_len=max(max_len,p[i]-1);\n    }\n    return max_len;\n}\nint main()\n{\n    scanf(\"%s\",s);\n    cout&lt;&lt;Manacher()&lt;&lt;endl;\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":false,"text":"树状数组解决问题类型： 单点修改 区间查询 核心函数#define lowbit(x) ((x)&amp;(-x)) int tr[N]; void add(int x,int v){ for(int i = x; i &lt;= n; i += lowbit(i)) tr[i]...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">树状数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">核心函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E7%82%B9%E6%9B%B4%E6%96%B0-%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">单点更新 区间查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E9%97%B4%E6%9B%B4%E6%96%B0-%E5%8D%95%E7%82%B9%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">区间更新 单点查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E9%97%B4%E6%9B%B4%E6%96%B0-%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">区间更新 区间查询</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%AE%B5%E6%A0%91\"><span class=\"toc-text\">线段树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E6%B3%95\"><span class=\"toc-text\">加法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E4%B9%98%E6%B7%B7%E5%90%88\"><span class=\"toc-text\">加乘混合</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Manacher%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">Manacher算法</span></a></li></ol>","author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"动态规划","uid":"f6af5bf3fb5f66f52237908153c03aea","slug":"动态规划","date":"2022-03-25T14:21:33.199Z","updated":"2022-03-28T11:44:04.415Z","comments":true,"path":"api/articles/动态规划.json","keywords":null,"cover":"https://pic.imgdb.cn/item/623dd06627f86abb2a22d851.jpg","text":"树形DP 一般树形dp都是用于树上问题，父亲与儿子的问题，找出动态转移方程式，用树的遍历对其进行赋值 一般存图可以用链表，邻接矩阵，链式前向星等等，可以用数组模拟或者vector模拟； 例题： 选择节点类生活在树上 题目描述： ZHR 住在一有根棵树上（1 号节点为根），树上的每...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"动态规划","slug":"动态规划","count":2,"path":"api/categories/动态规划.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":3,"path":"api/tags/动态规划.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"备战蓝桥杯","uid":"c486680c6ae6acdf2cecc52289734516","slug":"备战蓝桥杯","date":"2022-03-08T07:55:21.904Z","updated":"2022-04-04T02:24:26.656Z","comments":true,"path":"api/articles/备战蓝桥杯.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62270c705baa1a80ab349a19.jpg","text":"注意事项数据范围太大时使用scanf和printf输入和输出 int类型大概支持数据范围在 1e8左右，超过这个数的全部直接long long 数学求两个数的没法组合生成的最小整数 给定两个数a和b，求无法由a和b运算得到的最小整数 设c为所求最小整数 则 算术基本定理(唯一分解...","link":"","photos":[],"count_time":{"symbolsCount":403,"symbolsTime":"1 mins."},"categories":[{"name":"蓝桥杯","slug":"蓝桥杯","count":1,"path":"api/categories/蓝桥杯.json"}],"tags":[{"name":"蓝桥杯","slug":"蓝桥杯","count":1,"path":"api/tags/蓝桥杯.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}