{"title":"算法选择","uid":"60a84708f3c49aa5488e16601f40a652","slug":"算法选择","date":"2022-02-12T14:21:45.812Z","updated":"2022-02-12T10:40:00.810Z","comments":true,"path":"api/articles/算法选择.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>   一个图中，顶点数记为n，边数记为m</p>\n<p>   当<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.345ex\" height=\"1.912ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 1036.6 844.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.312ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.76ex\" height=\"1.751ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -636 778 774\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"2265\" d=\"M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g></g></g></svg></mjx-container>m时，称之为稀疏图</p>\n<p>   当m相对比较大时，称之为稠密图</p></blockquote>\n<span id=\"more\"></span>\n\n\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">graph</span> LR\nA<span class=\"token text string\">(最短路)</span>\nB<span class=\"token text string\">(单源最短路)</span>\nC<span class=\"token text string\">(多源汇最短路)</span>\nD<span class=\"token text string\">(所有边权都是正数)</span>\nE<span class=\"token text string\">(存在负权边)</span>\nF<span class=\"token text string\">(朴素Dijkstra算法)</span>\nG<span class=\"token text string\">(堆优化版的Dijkstra算法)</span>\nH<span class=\"token text string\">(Bellman-Ford)</span>\nI<span class=\"token text string\">(SPFA)</span>\nJ<span class=\"token text string\">(Floyd算法)</span>\nA<span class=\"token arrow operator\">--&gt;</span>B\nA<span class=\"token arrow operator\">--&gt;</span>C\nB<span class=\"token arrow operator\">--&gt;</span>D\nB<span class=\"token arrow operator\">--&gt;</span>E\nD<span class=\"token arrow operator\">--&gt;</span><span class=\"token label property\">|n^2|</span>F\nD<span class=\"token arrow operator\">--&gt;</span><span class=\"token label property\">|mlogn|</span>G\nE<span class=\"token arrow operator\">--&gt;</span><span class=\"token label property\">|nm|</span>H\nE<span class=\"token arrow operator\">--&gt;</span><span class=\"token label property\">|m  nm|</span>I\nC<span class=\"token arrow operator\">--&gt;</span><span class=\"token label property\">|n^3|</span>J\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">graph</span> LR\nA<span class=\"token text string\">(最小生成树)</span>\nB<span class=\"token text string\">(Prim算法)</span>\nC<span class=\"token text string\">(Kruskal算法)</span>\nD<span class=\"token text string\">(朴素版Prim)</span>\nE<span class=\"token text string\">(二分图)</span>\nF<span class=\"token text string\">(染色法)</span>\nG<span class=\"token text string\">(匈牙利算法)</span>\nA<span class=\"token arrow operator\">--&gt;</span>B<span class=\"token arrow operator\">--&gt;</span><span class=\"token label property\">|n^2|</span>D\nA<span class=\"token arrow operator\">--&gt;</span><span class=\"token label property\">|mlogm|</span>C\nE<span class=\"token arrow operator\">--&gt;</span><span class=\"token label property\">|n+m|</span>F\nE<span class=\"token arrow operator\">--&gt;</span><span class=\"token label property\">|mn|</span>G\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://pic.imgdb.cn/item/61fded092ab3f51d91384c95.jpg\" alt=\"最短路\"></p>\n<h3 id=\"储存方式\"><a href=\"#储存方式\" class=\"headerlink\" title=\"储存方式\"></a>储存方式</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>   单链表：邻接表<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.054ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.706ex\" height=\"1.242ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -525 1638 549\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"27F9\" d=\"M1218 514Q1218 525 1234 525Q1239 525 1242 525T1247 525T1251 524T1253 523T1255 520T1257 517T1260 512Q1297 438 1358 381T1469 300T1565 263Q1582 258 1582 250T1573 239T1536 228T1478 204Q1334 134 1260 -12Q1256 -21 1253 -22T1238 -24Q1218 -24 1218 -17Q1218 -13 1223 0Q1258 69 1309 123L1319 133H70Q56 140 56 153Q56 168 72 173H1363L1373 181Q1412 211 1490 250Q1489 251 1472 259T1427 283T1373 319L1363 327H710L707 328L390 327H72Q56 332 56 347Q56 360 70 367H1319L1309 377Q1276 412 1247 458T1218 514Z\"></path></g></g></g></svg></mjx-container>存储图和树</p>\n<p>   h[N]：表示头节点的下标</p>\n<p>   e[N]：某个节点的值</p>\n<p>   ne[N]：某个点的next指针是什么</p>\n<p>   idx：储存当前已经用到了哪个点</p>\n<p>   <img src=\"https://pic.imgdb.cn/item/61f60aaf2ab3f51d914078da.jpg\" alt=\"数组解释\"></p></blockquote>\n","feature":true,"text":" 一个图中，顶点数记为n，边数记为m 当m时，称之为稀疏图 当m相对比较大时，称之为稠密图 graph LR A(最短路) B(单源最短路) C(多源汇最短路) D(所有边权都是正数) E(存在负权边) F(朴素Dijkstra算法) G(堆优化版的Dijkstra算法) H(B...","link":"","photos":[],"count_time":{"symbolsCount":554,"symbolsTime":"1 mins."},"categories":[{"name":"图论","slug":"图论","count":2,"path":"api/categories/图论.json"}],"tags":[{"name":"图论","slug":"图论","count":2,"path":"api/tags/图论.json"},{"name":"算法选择","slug":"算法选择","count":2,"path":"api/tags/算法选择.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%82%A8%E5%AD%98%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">储存方式</span></a></li></ol>","author":{"name":"Snailuu","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/62035c342ab3f51d91f6154a.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"算法选择","uid":"60a84708f3c49aa5488e16601f40a652","slug":"最短路","date":"2022-02-12T14:21:45.818Z","updated":"2022-02-12T12:56:13.220Z","comments":true,"path":"api/articles/最短路.json","keywords":null,"cover":"https://pic.imgdb.cn/item/6207ae4e2ab3f51d91ae8070.jpg","text":"朴素版Dijkstra算法(适用于稠密图)思路 初始化距离数组和邻接矩阵（无穷大） 处理重边问题在输入取最小值 每次找到一个最小的未更新的答案点 将其连边答案全部更新 代码实现如下： #include&lt;bits/stdc++.h&gt; using namespace st...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"图论","slug":"图论","count":2,"path":"api/categories/图论.json"}],"tags":[{"name":"图论","slug":"图论","count":2,"path":"api/tags/图论.json"},{"name":"算法选择","slug":"算法选择","count":2,"path":"api/tags/算法选择.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/62035c342ab3f51d91f6154a.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}