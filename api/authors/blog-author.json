{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"模板","uid":"3c194b2f2319e046c85e1bc082983d3c","slug":"模板","date":"2022-02-16T08:35:59.408Z","updated":"2022-03-11T13:33:38.195Z","comments":true,"path":"api/articles/模板.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620c7b2d2ab3f51d91aff6f7.jpg","text":"本篇文章作为跳转文章，如需阅读模板请点击下方各类按钮基础算法数据结构搜索与图论数学算法选择","link":"","photos":[],"count_time":{"symbolsCount":45,"symbolsTime":"1 mins."},"categories":[{"name":"模板","slug":"模板","count":2,"path":"api/categories/模板.json"}],"tags":[],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"杂乱笔记","uid":"40516069856649c61c80ebcc0b14851f","slug":"杂点笔记","date":"2022-02-16T04:06:58.194Z","updated":"2022-03-14T11:47:30.590Z","comments":true,"path":"api/articles/杂点笔记.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620c7af22ab3f51d91afbaa6.jpg","text":"字符串 string类的插入insert(pos,string) 在下标pos和pos+1之间插入字符串string。 string类的删除earse(pos,num)从下标pos开始删除num个字符，如果num为空则删除pos后面的所有字符。 数学 取模的顺序：一定要优先对可能...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"笔记","slug":"笔记","count":1,"path":"api/categories/笔记.json"}],"tags":[{"name":"数学","slug":"数学","count":2,"path":"api/tags/数学.json"},{"name":"字符串","slug":"字符串","count":1,"path":"api/tags/字符串.json"},{"name":"动态规划","slug":"动态规划","count":2,"path":"api/tags/动态规划.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"错误之路","uid":"ef2958a60eebffed61302cfeed7e9fed","slug":"错误之路","date":"2022-02-16T02:58:30.254Z","updated":"2022-03-13T13:24:05.570Z","comments":true,"path":"api/articles/错误之路.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620a098b2ab3f51d9196f63a.jpg","text":"本篇文章用于记录学习之路/比赛上看似不起眼的小错误却又不得不重视的，一直都在更新……单词专区 the maximal possible product of elements ：最大可能乘积的元素，product 乘积 positive integer：正整数 non-X ：非X...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"备战蓝桥杯","uid":"c486680c6ae6acdf2cecc52289734516","slug":"备战蓝桥杯","date":"2022-03-08T07:55:21.904Z","updated":"2022-03-08T08:05:56.531Z","comments":true,"path":"api/articles/备战蓝桥杯.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62270c705baa1a80ab349a19.jpg","text":"注意事项数据范围太大时使用scanf和printf输入和输出 int类型大概支持数据范围在 1e8左右，超过这个数的全部直接long long 递归和递推","link":"","photos":[],"count_time":{"symbolsCount":78,"symbolsTime":"1 mins."},"categories":[{"name":"蓝桥杯","slug":"蓝桥杯","count":1,"path":"api/categories/蓝桥杯.json"}],"tags":[{"name":"蓝桥杯","slug":"蓝桥杯","count":1,"path":"api/tags/蓝桥杯.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"贪心总结","uid":"4055c80e84a3b6eaa6e959bbd1b51e6a","slug":"贪心总结","date":"2022-03-06T06:40:28.608Z","updated":"2022-03-08T07:58:20.164Z","comments":true,"path":"api/articles/贪心总结.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62270c945baa1a80ab34b350.jpg","text":"均分纸牌设总人数有 个，纸牌总数有 张，每个人初始纸牌数量为 ，则每个人最终拥有的纸牌数量均为 记作 在方案存在的情况下 第1个人为了达到平均数，需要向第2个人传递 数量的纸牌，（正表示拿，负表示给） 第2个人为了达到平均数，需要向第3个人传递 数量的纸牌 … … 第n-1个人为...","link":"","photos":[],"count_time":{"symbolsCount":634,"symbolsTime":"1 mins."},"categories":[{"name":"贪心","slug":"贪心","count":1,"path":"api/categories/贪心.json"}],"tags":[{"name":"贪心","slug":"贪心","count":1,"path":"api/tags/贪心.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"逆元","uid":"e7c582089fc58c53917014ad61ddc86d","slug":"逆元","date":"2022-03-02T13:40:44.841Z","updated":"2022-03-03T04:29:44.451Z","comments":true,"path":"api/articles/逆元.json","keywords":null,"cover":"https://pic.imgdb.cn/item/621f74715baa1a80ab0be146.jpg","text":"乘法逆元拓展欧几里得时间复杂度： 假设n为模数，如果 不是质数时可以用拓展欧几里得算法求逆元： 有逆元的充要条件是 与 互质，所以 假设 的逆元为 ，那么 等价于 求 ，用拓展欧几里得递归到最后x为 int exgcd(int a, int b, int &amp;x, int ...","link":"","photos":[],"count_time":{"symbolsCount":913,"symbolsTime":"1 mins."},"categories":[{"name":"数学","slug":"数学","count":2,"path":"api/categories/数学.json"}],"tags":[{"name":"数论","slug":"数论","count":1,"path":"api/tags/数论.json"},{"name":"逆元","slug":"逆元","count":1,"path":"api/tags/逆元.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"某些可能有用的链接","uid":"92e9e21f40cabb2aa99ef90279e6b57e","slug":"不知名文章","date":"2022-02-21T13:33:14.265Z","updated":"2022-02-21T14:19:36.117Z","comments":true,"path":"api/articles/不知名文章.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62139f712ab3f51d91ff3728.jpg","text":"2022/2/21 upd: 不知道链接能活多久 本文不定期更新 支持推荐，如果有什么你觉得很有意义的文章/工具，欢迎把链接发送给我。 Tools (about Competitive Programming) :Csacademy Graph Editor（画“图”） Data...","link":"","photos":[],"count_time":{"symbolsCount":905,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"图论最短路问题","uid":"aa03b2f0abb625816c3d81ed8f81147b","slug":"图论最短路","date":"2022-02-20T13:19:08.472Z","updated":"2022-02-20T13:19:08.472Z","comments":true,"path":"api/articles/图论最短路.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62091b5f2ab3f51d91da3fbb.jpg","text":"朴素版Dijkstra算法(适用于稠密图)思路 初始化距离数组和邻接矩阵（无穷大） 处理重边问题在输入取最小值 每次找到一个最小的未更新的答案点 将其连边答案全部更新 例题：Dijkstra算法朴素版 代码实现如下： #include &lt;bits/stdc++.h&gt; ...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"图论","slug":"图论","count":4,"path":"api/categories/图论.json"}],"tags":[{"name":"最短路","slug":"最短路","count":1,"path":"api/tags/最短路.json"},{"name":"稠密图","slug":"稠密图","count":1,"path":"api/tags/稠密图.json"},{"name":"稀疏图","slug":"稀疏图","count":1,"path":"api/tags/稀疏图.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"矩阵的数量V3","uid":"3066e00b6cf820c21780a6c4e3135165","slug":"矩阵的数量V3","date":"2022-02-19T09:53:53.021Z","updated":"2022-02-19T13:56:22.804Z","comments":true,"path":"api/articles/矩阵的数量V3.json","keywords":null,"cover":"https://pic.imgdb.cn/item/6210f6fe2ab3f51d91bac1ff.jpg","text":"题目链接：矩形的数量 V3 矩形的数量 V3 Time limit : 1000ms Memory limit: 131072 kb 一个m乘n的方格图，有多少个大小不同的正方形。 例如：4*3的方格中共有20个，其中： 12个 6个 2个 Input 共一行：2个数m,n，对应...","link":"","photos":[],"count_time":{"symbolsCount":884,"symbolsTime":"1 mins."},"categories":[{"name":"杂题","slug":"杂题","count":2,"path":"api/categories/杂题.json"}],"tags":[{"name":"数学知识","slug":"数学知识","count":1,"path":"api/tags/数学知识.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"数学模板","uid":"65b0dc824c3fb7ee6bc785abb93cc693","slug":"数学模板","date":"2022-02-17T13:59:00.749Z","updated":"2022-03-02T13:46:53.801Z","comments":true,"path":"api/articles/数学模板.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620f57e32ab3f51d91cc1c24.jpg","text":"质数试除法判定质数 时间复杂度： bool is_prime(int x) { if (x &lt; 2) return false; for (int i = 2; i &lt;= x / i; i ++ ) if (x % i == 0) return false; retu...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"数学","slug":"数学","count":2,"path":"api/categories/数学.json"},{"name":"模板","slug":"数学/模板","count":1,"path":"api/categories/数学/模板.json"}],"tags":[{"name":"模板","slug":"模板","count":4,"path":"api/tags/模板.json"},{"name":"数学","slug":"数学","count":2,"path":"api/tags/数学.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"搜索与图论模板","uid":"d11324b19b05ce1c671aea0ac57ea0cf","slug":"搜索与图论模板","date":"2022-02-17T03:41:35.497Z","updated":"2022-03-02T13:47:12.065Z","comments":true,"path":"api/articles/搜索与图论模板.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620dfb952ab3f51d91eca726.jpg","text":"树与图的存储 树是一种特殊的图（无向无环图），与图的存储方式相同 无向图就是特殊的有向图，存储两条边 和 邻接矩阵：g[a][b]存储边 邻接表： // 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点 int h[N], e[N], ne[N]...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"图论","slug":"图论","count":4,"path":"api/categories/图论.json"},{"name":"模板","slug":"图论/模板","count":1,"path":"api/categories/图论/模板.json"}],"tags":[{"name":"模板","slug":"模板","count":4,"path":"api/tags/模板.json"},{"name":"图论","slug":"图论","count":3,"path":"api/tags/图论.json"},{"name":"搜索","slug":"搜索","count":1,"path":"api/tags/搜索.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"Misha and Forest","uid":"c28259cd908768634e0a4505c18b8177","slug":"Misha and Forest","date":"2022-02-16T12:26:41.888Z","updated":"2022-02-17T02:35:08.027Z","comments":true,"path":"api/articles/Misha and Forest.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62091b402ab3f51d91da1db3.jpg","text":"原题链接：Codeforces Round #285 (Div. 2)C. Misha and Forest C. Misha and Forest Time limit:1000ms Memory limit:262144kb Let’s define a forest as ...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"codeforecs","slug":"codeforecs","count":1,"path":"api/categories/codeforecs.json"}],"tags":[{"name":"位运算","slug":"位运算","count":2,"path":"api/tags/位运算.json"},{"name":"拓扑排序","slug":"拓扑排序","count":1,"path":"api/tags/拓扑排序.json"},{"name":"树","slug":"树","count":1,"path":"api/tags/树.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"STL算法","uid":"2c4ac29383b35bd575e7e033cc42c68d","slug":"STL算法","date":"2022-02-16T10:51:19.371Z","updated":"2022-02-16T11:16:59.895Z","comments":true,"path":"api/articles/STL算法.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620cd76f2ab3f51d914e329b.jpg","text":"数组相关nth_element//重新排序[first,last)中的元素，使得新的nth元素前的所有元素小于或等于新的nth元素后的所有元素 std::nth_element(first, nth, last, cmp); //默认排序规则从小到大 应用：求第 大/小的数 ma...","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[{"name":"STL","slug":"STL","count":2,"path":"api/categories/STL.json"}],"tags":[{"name":"STL算法","slug":"STL算法","count":1,"path":"api/tags/STL算法.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"STL容器","uid":"dd310f63c22e1adb321e0e6222b0b1f9","slug":"STL容器","date":"2022-02-16T09:21:30.340Z","updated":"2022-02-16T10:50:55.872Z","comments":true,"path":"api/articles/STL容器.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620cc8d82ab3f51d9139bfcb.jpg","text":"vector 可变数组，倍增的思想 设vector&lt;int&gt;a,b a.size()返回a元素个数 a.empty()返回a是否为空 a.clear()清空数组a a.resize()调整a空间大小 a.swap(b) 将a中的元素和b中的元素整体交换 a.front...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"STL","slug":"STL","count":2,"path":"api/categories/STL.json"}],"tags":[{"name":"STL容器","slug":"STL容器","count":1,"path":"api/tags/STL容器.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"数据结构模板","uid":"1df484034a65ae4d42f3134f61bf20af","slug":"数据结构模板","date":"2022-02-16T06:09:33.395Z","updated":"2022-03-12T15:19:57.234Z","comments":true,"path":"api/articles/数据结构模板.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620c96192ab3f51d91d60f3a.jpg","text":"单链表 head存储表头，e[]存储节点的值,ne[]存储节点的next指针，idx表示当前用到了哪个节点 int head, e[N], ne[N], idx; // 初始化 void init() { head = -1; idx = 0; } // 在链表头插入一个数a v...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/categories/数据结构.json"},{"name":"模板","slug":"数据结构/模板","count":1,"path":"api/categories/数据结构/模板.json"}],"tags":[{"name":"模板","slug":"模板","count":4,"path":"api/tags/模板.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"回文字符串","uid":"768c5d200987ad0ffa01337632098c22","slug":"回文字符串","date":"2022-02-15T03:47:30.314Z","updated":"2022-03-11T12:44:23.126Z","comments":true,"path":"api/articles/回文字符串.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620cbc3d2ab3f51d91253ecd.jpg","text":"最长回文子序列 最长回文子序列 LPS（Longest Palindromic Subsequence） 状态表示：表示从 到 序列的最长回文子序列 代码 #include &lt;iostream&gt; #include &lt;algorithm&gt; #include ...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"杂题","slug":"杂题","count":2,"path":"api/categories/杂题.json"}],"tags":[{"name":"回文字符串","slug":"回文字符串","count":1,"path":"api/tags/回文字符串.json"},{"name":"回文序列","slug":"回文序列","count":1,"path":"api/tags/回文序列.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"二进制问题","uid":"321148201d6e624da674378719102cb9","slug":"二进制","date":"2022-02-14T07:37:34.676Z","updated":"2022-03-04T04:51:20.397Z","comments":true,"path":"api/articles/二进制.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620c68f02ab3f51d919a55d1.jpg","text":"异或OR（半加法）： 异或符合加法性质（奇偶性） 奇+奇==偶 奇+偶==奇 偶+偶==偶 偶+奇==奇 ｀｀ 注：奇数-1，偶数+1 bitset bitset&lt;32&gt;q(n)定义为一个空间大小为，名为，内容为（可以为整数，） bitset就像普通的整数一样，可以进...","link":"","photos":[],"count_time":{"symbolsCount":607,"symbolsTime":"1 mins."},"categories":[{"name":"二进制","slug":"二进制","count":1,"path":"api/categories/二进制.json"}],"tags":[{"name":"位运算","slug":"位运算","count":2,"path":"api/tags/位运算.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"基础算法模板","uid":"cad29d88a5e84162d8735ff1cbc7e6a8","slug":"基础算法模板","date":"2022-02-14T04:49:54.725Z","updated":"2022-03-12T15:05:34.447Z","comments":true,"path":"api/articles/基础算法模板.json","keywords":null,"cover":"https://pic.imgdb.cn/item/620a09c42ab3f51d91972f3d.jpg","text":"归并排序 确定分界点， 递归排序 归并——合二为一 void merge_sort(int q[], int l, int r)//q数组从l到r排序 { if (l &gt;= r) return;//出口 int mid = l + r &gt;&gt; 1;//分界点 me...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"模板","slug":"模板","count":2,"path":"api/categories/模板.json"}],"tags":[{"name":"模板","slug":"模板","count":4,"path":"api/tags/模板.json"},{"name":"基础算法","slug":"基础算法","count":1,"path":"api/tags/基础算法.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"背包问题","uid":"32c803d1fefb525b38a8f636ccbac12b","slug":"背包问题","date":"2022-02-13T12:09:32.829Z","updated":"2022-03-04T04:51:13.192Z","comments":true,"path":"api/articles/背包问题.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62091b852ab3f51d91da68e2.jpg","text":" 01背包例题：01背包问题 描述：有 件物品和一个容量为 的背包，每件物品有各自的价值且只能被选择一次，要求在有限的背包容量下，装入的物品总价值最大。 动态规划是不断决策求最优解的过程，「0-1 背包」即是不断对第 i 个物品的做出决策，「0-1」正好代表不选与选两种决定。 代...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"动态规划","slug":"动态规划","count":1,"path":"api/categories/动态规划.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":2,"path":"api/tags/动态规划.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"最小生成树","uid":"f83333b56248d745b141d3885b656c81","slug":"最小生成树","date":"2022-02-13T07:22:11.269Z","updated":"2022-02-16T03:02:44.803Z","comments":true,"path":"api/articles/最小生成树.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62091b402ab3f51d91da1db3.jpg","text":"假设表示图中点数，表示图中边数 朴素版Prim算法（适用于稠密图，复杂度O())思路：将条边到另一条边的距离初始化成从遍历到找到集合外距离最小的点标记为，用来更新它到集合的距离，标记一下 例题：Prim算法求最小生成树 核心代码： // st[i] 表示点i是否在当前生成树集合中...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"图论","slug":"图论","count":4,"path":"api/categories/图论.json"}],"tags":[{"name":"图论","slug":"图论","count":3,"path":"api/tags/图论.json"},{"name":"生成树","slug":"生成树","count":1,"path":"api/tags/生成树.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"拓扑排序","uid":"01d132f13ac67dff21350f57c338a855","slug":"拓扑排序","date":"2022-02-13T07:19:11.215Z","updated":"2022-02-16T13:20:10.835Z","comments":true,"path":"api/articles/拓扑排序.json","keywords":null,"cover":"https://pic.imgdb.cn/item/62091b702ab3f51d91da51dd.jpg","text":"拓扑排序应用场景在做某些事的时候他们之间有前后关系（顺序关系或者依赖关系），比如安排座位，穿衣服先后，课程学习等等。 拓扑排序只对于有向无环图而言(Directed Acyclic Graph简称DAG) 如果有a,b,c,d等件事情，a的优先级最高，d的优先级最低，那么abcd...","link":"","photos":[],"count_time":{"symbolsCount":865,"symbolsTime":"1 mins."},"categories":[{"name":"图论","slug":"图论","count":4,"path":"api/categories/图论.json"}],"tags":[{"name":"图论","slug":"图论","count":3,"path":"api/tags/图论.json"},{"name":"排序","slug":"排序","count":1,"path":"api/tags/排序.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},{"title":"算法选择","uid":"60a84708f3c49aa5488e16601f40a652","slug":"算法选择","date":"2022-02-13T07:09:10.466Z","updated":"2022-02-13T07:14:46.843Z","comments":true,"path":"api/articles/算法选择.json","keywords":null,"cover":"https://pic.imgdb.cn/item/6207ae4e2ab3f51d91ae8070.jpg","text":"数据范围推断算法选择 数据范围 时间复杂度 算法 指数级别 dfs+剪枝，状态压缩dp floyd，dp，高斯消元 ， dp，二分，朴素版Dijkstra，朴素版Prim，Bellman-Ford 块状链表，分块，莫队 各种sort，线段树，树状数组，set/map，heap，拓...","link":"","photos":[],"count_time":{"symbolsCount":477,"symbolsTime":"1 mins."},"categories":[{"name":"数据范围","slug":"数据范围","count":1,"path":"api/categories/数据范围.json"}],"tags":[{"name":"算法选择","slug":"算法选择","count":1,"path":"api/tags/算法选择.json"}],"author":{"name":"Snailuu","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2022/02/cf596ea7a7a4830f.jpg","link":"/","description":"本就无一物，何惧世道无常","socials":{"github":"https://github.com/snailuu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}],"categories":13,"tags":34,"word_count":"63k","post_count":22}